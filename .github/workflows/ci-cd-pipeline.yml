name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0

      - name: Restore dependencies
        run: dotnet restore src/DotNetWebApp

      - name: Debug - List Files
        run: ls -R

      - name: Build and publish
        run: |
          cd src/DotNetWebApp
          dotnet build --no-restore
           dotnet publish -c Release -o out
          # dotnet publish -t:PublishContainer -c Release


      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          cd src/DotNetWebApp 
          dotnet sonarscanner begin /k:"manishchub_dotnetwebapp" /d:sonar.host.url="https://sonarcloud.io" /o:"manishchub" /d:sonar.token="$SONAR_TOKEN"
          dotnet build
          dotnet test --collect:"XPlat Code Coverage" --results-directory coverage
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

      - name: Run Snyk Security Scan
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Build Docker Image
        run: |
          pwd
          docker build -t dotnetwebapp:latest -f src/DotNetWebApp/Dockerfile .

      - name: Push Docker Image to AWS ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          docker tag dotnetwebapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy to AWS EKS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_CLUSTER_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_CLUSTER_ACCESS_SECRET }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.AWS_EKS_CLUSTER }}
          aws sts get-caller-identity
          kubectl delete secret ecr-repository
          kubectl delete secret aws-account-id
          kubectl create secret generic ecr-repository --from-literal=ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
          kubectl create secret generic aws-account-id --from-literal=AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          kubectl cluster-info
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
